{"version":3,"file":"static/js/337.45312cf6.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/ContactList.jsx","components/Phonebook/ContactForm.jsx","components/Phonebook/Filter.jsx","pages/Contacts.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Phonebook_form__J23fu\",\"form_input\":\"Phonebook_form_input__E2I5c\",\"form_btn\":\"Phonebook_form_btn__zzXyP\",\"find_input\":\"Phonebook_find_input__z9pBH\",\"find_label\":\"Phonebook_find_label__D6PsS\",\"item\":\"Phonebook_item__HtWTq\",\"item_btn\":\"Phonebook_item_btn__fS4Rh\",\"title\":\"Phonebook_title__ipARL\"};","import { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact } from '../../redux/contacts/operations'\nimport { nanoid } from 'nanoid'\nimport styles from './Phonebook.module.css'\n\nexport const ContactList = () => {\n\n    const contacts = useSelector(state => state.contacts.items);\n      const filters = useSelector(state => state.filters);\n  const dispatch = useDispatch();\n\n  console.log(contacts)\n\n      function onDelete(index) {\n    dispatch(deleteContact(index))\n      }\n      function hendleFind() {\n        const normalizedFilter = filters.toLowerCase();\n          return (contacts.filter(contact =>\n               contact.name.toLowerCase().includes(normalizedFilter)\n    ))\n      }\n    \n    const contactsData = hendleFind()\nreturn (\n            <ul>\n        {contactsData.map(({ name, number, id }, index) =>           \n            <li key={nanoid()} className={styles.item}>\n                        <span>{name}: {number}</span>\n                        <button type='button' className = {styles.item_btn} onClick={()=>onDelete(id)} key = {index}>Delete</button>\n                    </li>\n                )}\n             </ul>\n         )\n}\n\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useState } from 'react';\nimport {addContact} from '../../redux/contacts/operations'\nimport { nanoid } from 'nanoid'\nimport styles from './Phonebook.module.css'\nexport function ContactForm (){\n  const contacts = useSelector(state => state.contacts.items);\n   const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n    const dispatch = useDispatch();\n  \n    function hendleChange (event) {\n    const { name, value } = event.currentTarget\n        switch (name) {\n          case 'name':\n            setName(value)\n            break;\n          case 'number':\n            setNumber(value)\n            break;\n        \n          default:\n            return;\n        }\n        \n    }\n\n  function hendleSubmit(event) {\n    event.preventDefault()\n    if (contacts.find(contact =>\n      contact.name.toLowerCase() === name.toLowerCase()\n    \n    )) {\n      return alert(`${name} is already in contacts.`)\n    }\n    \n    dispatch(addContact( {name, number} ))\n    reset()\n  }\n  \n\n      function reset () {\n      setName('')\n      setNumber('')\n  }\n    \n        return (\n        <form onSubmit={hendleSubmit} className={styles.form}>\n        <label className={styles.form_label}>\n          Name\n          <br/><input\n  type=\"text\"\n        name=\"name\"\n        value={name}\n                        onChange={hendleChange}\n                        className={styles.form_input}\n                        \n        id={\n          nanoid()\n        }\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  required\n/>\n          </label><br/>\n          <label className={styles.form_label}>\n            Number\n            <br/><input\n  type=\"tel\"\n              name=\"number\"\n              value={number}\n                        onChange={hendleChange}\n                        className={styles.form_input}\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n  required\n/>\n          </label><br/>\n        <button type='submit' className={styles.form_btn}>Add contact</button>\n        </form>\n\n    )\n}\n\nContactForm.prototype = {\n  hendleSubmit:PropTypes.func.isRequired\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport{setStatusFilter } from '../../redux/contacts/filtersSlice'\nimport PropTypes from 'prop-types';\nimport styles from './Phonebook.module.css'\n\nexport function Filter(){\n\n  const filters = useSelector(state => state.filters);\n  \n  const dispatch = useDispatch();\n    \n    function hendleFilter(event) {\n             const {value} = event.target\n       dispatch(setStatusFilter(value))\n        \n    }\n        return (\n            <label className={styles.find_label}>\n          Find contacts by name\n            <br/><input type=\"text\" name=\"filter\"\n                value={filters}\n                    onChange={hendleFilter}\n                className={styles.find_input}/>\n        </label>\n        )\n}\n\nFilter.prototype = {\n    value:PropTypes.string.isRequired\n}","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/contacts/operations';\n\nimport { ContactList } from '../components/Phonebook/ContactList';\nimport { ContactForm } from '../components/Phonebook/ContactForm';\nimport { Filter } from '../components/Phonebook/Filter';\nimport styles from '../components/Phonebook/Phonebook.module.css';\n\nexport default function Contacts() {\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const error = useSelector(state => state.contacts.error);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1 className={styles.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={styles.title}>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </div>\n  );\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactList","contacts","useSelector","state","items","filters","dispatch","useDispatch","console","log","contactsData","normalizedFilter","toLowerCase","filter","contact","name","includes","hendleFind","map","index","number","className","styles","type","onClick","deleteContact","onDelete","ContactForm","useState","setName","setNumber","hendleChange","event","currentTarget","value","onSubmit","preventDefault","find","alert","addContact","onChange","pattern","title","required","prototype","hendleSubmit","PropTypes","Filter","target","setStatusFilter","Contacts","isLoading","error","useEffect","fetchContacts","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}